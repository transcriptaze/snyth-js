const TAU = 2 * Math.PI
const L = 50 * TAU / 360
const K = 30 * TAU / 360

const BR = 320 * TAU / 360
const TR = 60 * TAU / 360
const TL = 120 * TAU / 360
const BL = 220 * TAU / 360

const br = { x: Math.sin(L), y: -Math.cos(L) }
const tr = { x: Math.sin(K), y: Math.cos(K) }
const tl = { x: -Math.sin(K), y: Math.cos(K) }
const bl = { x: -Math.sin(L), y: -Math.cos(L) }

function _degrees (v) {
  return Math.round(v * 360 / TAU)
}

export function shapeùõ¢ (Œ±, { m, e, s, Œ∏, h, Œ¶, ùúì, Œ¥x, Œ¥y }) {
  const Œµ = Math.tanh(s * e)
  const a = (Œµ < 0.0) ? Math.sqrt(1 - Œµ * Œµ) : 1
  const b = (Œµ > 0.0) ? Math.sqrt(1 - Œµ * Œµ) : 1
  const œÜ = phiùõ¢(a, b, Œ∏, Œ¶)
  const cosŒ∏ = Math.cos(Œ∏)
  const sinŒ∏ = Math.sin(Œ∏)

  const u = Math.atan(-b * Math.tan(Œ∏) / a)
  const v = Math.atan((b / Math.tan(Œ∏)) * a) // cotangent
  const tx = a * Math.cos(u) * cosŒ∏ - b * Math.sin(u) * sinŒ∏
  const ty = b * Math.sin(v) * cosŒ∏ + a * Math.cos(v) * sinŒ∏
  const Œ¥x º = tx * Œ¥x
  const Œ¥y º = ty * Œ¥y

  const p º = h * a * cosŒ∏
  const q º = h * b * sinŒ∏
  const r º = h * Œ¥x º
  const s º = h * a * sinŒ∏
  const t º = h * b * cosŒ∏
  const u º = h * Œ¥y º

  const transform = ({ x, y }) => {
    return {
      x: p º * x - q º * y + r º,
      y: s º * x + t º * y + u º
    }
  }

  return genfnùõ¢(Œ±, m, œÜ, ùúì).map(xy => transform(xy))
}

export function pathùõ¢ (Œ±, { m, e, s, Œ∏, h, Œ¶, ùúì, Œ¥x, Œ¥y }) {
  return shapeùõ¢(Œ±, { m, e, s, Œ∏, h: 1, Œ¶, ùúì: 0, Œ¥x, Œ¥y }).map(({ x, y }) => {
    const r = Math.hypot(x, y)

    return r === 0 ? 0 : h * y / r
  })
}

export function snùõ¢ (Œ±, { m, e, s, Œ∏, h, Œ¶, ùúì, Œ¥x, Œ¥y }) {
  return shapeùõ¢(Œ±, { m, e, s, Œ∏, h: 1, Œ¶, ùúì: 0, Œ¥x, Œ¥y }).map(({ x, y }) => {
    const r = Math.hypot(x, y)

    return r > 0 ? h * y / r : 0
  })
}

function genfnùõ¢ (Œ±, m, œÜ, ùúì) {
  const f1 = (x4, y4) => {
    const x1 = br.x
    const y1 = br.y
    const x2 = tr.x
    const y2 = tr.y
    const x3 = 0
    const y3 = y4

    const a11 = x1 * y2 - x2 * y1
    const a12 = x1 - x2
    const a21 = x3 * y4 - x4 * y3
    const a22 = x3 - x4

    const b11 = y2 - y1
    const b12 = x1 - x2
    const b21 = y4 - y3
    const b22 = x3 - x4

    const c11 = y2 - y1
    const c12 = x1 * y2 - x2 * y1
    const c21 = y4 - y3
    const c22 = x3 * y4 - x4 * y3

    const detA = a11 * a22 - a12 * a21
    const detB = b11 * b22 - b12 * b21
    const detC = c11 * c22 - c12 * c21

    const x = detA / detB
    const y = detC / detB

    return {
      x,
      y
    }
  }

  const f2 = (x4, y4) => {
    const x1 = tr.x
    const y1 = tr.y
    const x2 = tl.x
    const y2 = tl.y
    const x3 = x4
    const y3 = 0

    const a11 = x1 * y2 - x2 * y1
    const a12 = x1 - x2
    const a21 = x3 * y4 - x4 * y3
    const a22 = x3 - x4

    const b11 = y2 - y1
    const b12 = x1 - x2
    const b21 = y4 - y3
    const b22 = x3 - x4

    const c11 = y2 - y1
    const c12 = x1 * y2 - x2 * y1
    const c21 = y4 - y3
    const c22 = x3 * y4 - x4 * y3

    const detA = a11 * a22 - a12 * a21
    const detB = b11 * b22 - b12 * b21
    const detC = c11 * c22 - c12 * c21

    const x = detA / detB
    const y = detC / detB

    return {
      x,
      y
    }
  }

  const f3 = (x4, y4) => {
    const x1 = tl.x
    const y1 = tl.y
    const x2 = bl.x
    const y2 = bl.y
    const x3 = 0
    const y3 = y4

    const a11 = x1 * y2 - x2 * y1
    const a12 = x1 - x2
    const a21 = x3 * y4 - x4 * y3
    const a22 = x3 - x4

    const b11 = y2 - y1
    const b12 = x1 - x2
    const b21 = y4 - y3
    const b22 = x3 - x4

    const c11 = y2 - y1
    const c12 = x1 * y2 - x2 * y1
    const c21 = y4 - y3
    const c22 = x3 * y4 - x4 * y3

    const detA = a11 * a22 - a12 * a21
    const detB = b11 * b22 - b12 * b21
    const detC = c11 * c22 - c12 * c21

    const x = detA / detB
    const y = detC / detB

    return {
      x,
      y
    }
  }

  const f4 = (x4, y4) => {
    const x1 = bl.x
    const y1 = bl.y
    const x2 = br.x
    const y2 = br.y
    const x3 = x4
    const y3 = 0

    const a11 = x1 * y2 - x2 * y1
    const a12 = x1 - x2
    const a21 = x3 * y4 - x4 * y3
    const a22 = x3 - x4

    const b11 = y2 - y1
    const b12 = x1 - x2
    const b21 = y4 - y3
    const b22 = x3 - x4

    const c11 = y2 - y1
    const c12 = x1 * y2 - x2 * y1
    const c21 = y4 - y3
    const c22 = x3 * y4 - x4 * y3

    const detA = a11 * a22 - a12 * a21
    const detB = b11 * b22 - b12 * b21
    const detC = c11 * c22 - c12 * c21

    const x = detA / detB
    const y = detC / detB

    return {
      x,
      y
    }
  }

  // totally wrong but sounds amazing!!
  // const Œ± º = (m*v + TAU) % TAU
  return Œ±.map((v) => {
    const Œ± º = (m * v + TAU) % TAU
    const x = Math.cos(m * Œ± º)
    const y = Math.sin(m * Œ± º)

    if (Œ± º >= BR || Œ± º <= TR) {
      return f1(x, y)
    } else if (Œ± º <= TL) {
      return f2(x, y)
    } else if (Œ± º <= BL) {
      return f3(x, y)
    } else {
      return f4(x, y)
    }
  })
}

function phiùõ¢ (a, b, Œ∏, Œ¶) {
  return 0
}
